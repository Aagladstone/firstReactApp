{"version":3,"sources":["components/Wrapper/index.js","components/Footer/index.js","components/Header/index.js","components/Jumbotron/index.js","components/PictureCard/index.js","components/Score/index.js","components/Guesses/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Footer","Header","React","Component","Jumbotron","PictureCard","onClick","setScore","key","alt","name","src","image","Score","score","topScore","Guesses","Title","reset","App","state","schools","_this","setState","window","location","reload","_this2","this","components_Wrapper","components_Header","components_Guesses","components_Title","resetGame","components_Score","scoring","components_Jumbotron","map","s","components_PictureCard","id","components_Footer","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sqEAOeA,MAJf,SAAiBC,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,iBCM1BC,MAPf,SAAgBN,GACd,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,IAAyBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,eAAmCJ,EAAMK,YCYrDE,0LANb,OACAN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,YATmBI,IAAMC,kBCaZC,MAbf,WACE,OAEET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,gBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,iDCMWO,MAZf,SAAqBX,GAEnB,OAEEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOQ,QAASZ,EAAMa,SAAUC,IAAKd,EAAMc,KAEtDb,EAAAC,EAAAC,cAAA,OAAKY,IAAKf,EAAMgB,KAAMC,IAAKjB,EAAMkB,gBCE1BC,MARf,SAAenB,GACb,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACZH,EAAAC,EAAAC,cAAA,qBAAaH,EAAMoB,MAAnB,iBAAwCpB,EAAMqB,SAA9C,aCCUC,MAJf,SAAiBtB,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,IAA0BH,EAAAC,EAAAC,cAAA,MAAIC,UAAW,eAAf,4BAA1B,YCKMmB,MANf,SAAevB,GACb,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,IAAyBH,EAAAC,EAAAC,cAAA,MAAIS,QAASZ,EAAMwB,OAAnB,eAAzB,MC0FaC,6MAjFbC,MAAQ,CACNC,UACAP,MAAO,EACPC,SAAU,KAyBZR,SAAW,WAEPe,EAAKC,SAAS,CAACT,MAAOQ,EAAKF,MAAMN,MAAQ,IAErCQ,EAAKF,MAAML,UAAYO,EAAKF,MAAMN,OAEpCQ,EAAKC,SAAS,CAAER,SAAUO,EAAKF,MAAML,SAAW,gFAzBpDS,OAAOC,SAASC,mFA+BT,IAAAC,EAAAC,KAIP,OAEEjC,EAAAC,EAAAC,cAACgC,EAAD,KACElC,EAAAC,EAAAC,cAACiC,EAAD,MAGEnC,EAAAC,EAAAC,cAACkC,EAAD,UACApC,EAAAC,EAAAC,cAACmC,EAAD,CACAd,MAAOU,KAAKK,YAEZtC,EAAAC,EAAAC,cAACqC,EAAD,CACEpB,MAAOc,KAAKR,MAAMN,MAClBC,SAAUa,KAAKR,MAAML,SACrBoB,QAASP,KAAKR,MAAMe,UAGxBxC,EAAAC,EAAAC,cAACuC,EAAD,UAECR,KAAKR,MAAMC,QAAQgB,IAAI,SAACC,GAAD,OACtB3C,EAAAC,EAAAC,cAAC0C,EAAD,CAEEC,GAAIF,EAAEE,GACNhC,IAAK8B,EAAEE,GACP5B,MAAO0B,EAAE1B,MACTL,SAAUoB,EAAKpB,aAKnBZ,EAAAC,EAAAC,cAAC4C,EAAD,kBA3EUtC,aCAEuC,QACW,cAA7BlB,OAAOC,SAASkB,UAEe,UAA7BnB,OAAOC,SAASkB,UAEhBnB,OAAOC,SAASkB,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f47ad982.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Footer(props) {\r\n  return (\r\n  <div className=\"footer\"> <div className=\"text\"> Clicky Game{props.children}</div>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nclass Header extends React.Component {\r\n  \r\n  // scoring() {\r\n  //   this.setState({score: this.state.score + 1});\r\n  // }\r\n\r\n\r\n  render() {\r\n  return (\r\n  <div className=\"header\"> </div>\r\n  );\r\n\r\n  }\r\n}\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Jumbotron() {\r\n  return (\r\n\r\n    <div className=\"jumbotron jumbotron-fluid\">\r\n  <div className=\"container\">\r\n    <h1 className=\"display-4\">Clicky Game!</h1>\r\n    <p className=\"lead\">Instructions for clicky game.</p>\r\n  </div>\r\n</div>\r\n\r\n  );\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction PictureCard(props) {\r\n  \r\n  return (\r\n\r\n    <div className=\"card\" onClick={props.setScore} key={props.key}>\r\n\r\n        <img alt={props.name} src={props.image}/> \r\n        \r\n    </div> \r\n  );\r\n}\r\n\r\nexport default PictureCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Score(props) {\r\n  return (\r\n  <div className=\"score\"> \r\n     <h2> Score: {props.score} | Top Score: {props.topScore} </h2>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default Score;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Guesses(props) {\r\n  return <div className=\"guesses\"> <h2 className= \"guessStatus\">Click an Image to Begin!</h2> </div>;\r\n}\r\n\r\nexport default Guesses;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n  return (\r\n  <div className=\"title\" > <h2 onClick={props.reset}>Clicky Game</h2> </div>\r\n  )\r\n}\r\n\r\nexport default Title;","import React, { Component } from 'react';\nimport './App.css';\nimport Wrapper from './components/Wrapper';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\nimport Jumbotron from './components/Jumbotron';\nimport schools from './schools.json';\nimport PictureCard from './components/PictureCard'\nimport Score from './components/Score'\nimport Guesses from './components/Guesses'\nimport Title from './components/Title'\n\nclass App extends Component {\n\n  state = {\n    schools,\n    score: 0,\n    topScore: 0\n\n  };\n\n  resetGame(){\n\n    window.location.reload();\n\n  }\n\n  // shuffleSchool(array) {\n  //   let i = schools.length - 1;\n  //   for (; i > 0; i--) {\n  //     const j = Math.floor(Math.random() * (i + 1));\n  //     const show = array[i];\n  //     array[i] = array[j];\n  //     array[j] = show;\n  //   }\n  //   return array;\n  // }\n\n  guessFunction() {\n\n  }\n\n  setScore = () => {\n  \n      this.setState({score: this.state.score + 1});\n\n      if (this.state.topScore <= this.state.score) {\n        \n        this.setState({ topScore: this.state.topScore + 1})\n\n      }\n  \n  }\n\n  render() {\n\n    // const shuffleSchool = shuffleSchool(this.props.pictureCard);\n    \n    return (\n\n      <Wrapper> \n        <Header> \n\n        </Header>   \n          <Guesses> </Guesses>\n          <Title \n          reset={this.resetGame}\n          />\n          <Score\n            score={this.state.score}\n            topScore={this.state.topScore}\n            scoring={this.state.scoring}\n          />\n          \n        <Jumbotron> </Jumbotron>\n\n        {this.state.schools.map((s) => (\n          <PictureCard\n            // shuffleSchool={this.shuffleSchool}\n            id={s.id}\n            key={s.id}\n            image={s.image}\n            setScore={this.setScore}\n          />\n          \n        ))}\n\n        <Footer> </Footer>\n      </Wrapper>\n\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}